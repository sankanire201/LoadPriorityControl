@startuml Class design
interface Observer {
    +update(device_id: int, power_consumption: int)
}

interface Observable {
    +register_observer(observer: Observer)
    +remove_observer(observer: Observer)
    +notify_observers()
}

interface CommunicationService {
    +connect()
    +check_health()
}

class SmartPlug implements Observable, CommunicationService {
    +id: int
    +status: str
    +power_consumption: int
    +connected: bool
    +observers: list
    +turn_on()
    +turn_off()
    +get_power_consumption()
    +set_power_consumption(power: int)
    +register_observer(observer: Observer)
    +remove_observer(observer: Observer)
    +notify_observers()
    +connect()
    +check_health()
    +__str__()
}

class SmartLight implements Observable, CommunicationService {
    +id: int
    +status: str
    +power_consumption: int
    +connected: bool
    +observers: list
    +turn_on()
    +turn_off()
    +get_power_consumption()
    +set_power_consumption(power: int)
    +register_observer(observer: Observer)
    +remove_observer(observer: Observer)
    +notify_observers()
    +connect()
    +check_health()
    +__str__()
}

interface IOTDeviceFacade {
    +turn_on(device_id: int)
    +turn_off(device_id: int)
    +get_power_consumption(device_id: int)
    +add_device(device)
    +set_power_consumption(device_id: int, power: int)
    +connect_device(device_id: int)
    +check_device_health(device_id: int)
}

class IOTDeviceFacadeImpl implements IOTDeviceFacade {
    -devices: dict
    +add_device(device)
    +turn_on(device_id: int)
    +turn_off(device_id: int)
    +get_power_consumption(device_id: int)
    +set_power_consumption(device_id: int, power: int)
    +connect_device(device_id: int)
    +check_device_health(device_id: int)
}

class SmartPlugController {
    -facade: IOTDeviceFacade
    -current_strategy: PriorityControlStrategy
    +add_smart_plug(smart_plug)
    +set_strategy(strategy: PriorityControlStrategy)
    +execute_strategy()
}

interface PriorityControlStrategy {
    +execute(facade: IOTDeviceFacade)
}

class SimplePriorityStrategy implements PriorityControlStrategy {
    +execute(facade: IOTDeviceFacade)
}

class PowerConsumptionMonitor implements Observer {
    +threshold: int
    +update(device_id: int, power_consumption: int)
}

class UserInterface {
    +display_status(devices)
    +get_user_priority()
    +get_power_threshold()
}

Observer <|-- PowerConsumptionMonitor
Observable <|.. SmartPlug
Observable <|.. SmartLight
CommunicationService <|.. SmartPlug
CommunicationService <|.. SmartLight
IOTDeviceFacade <|.. IOTDeviceFacadeImpl
SmartPlugController --> IOTDeviceFacade
SmartPlugController --> PriorityControlStrategy
PriorityControlStrategy <|.. SimplePriorityStrategy
PowerConsumptionMonitor --> SmartPlugController
UserInterface --> SmartPlugController
@enduml
