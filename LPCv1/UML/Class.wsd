@startuml
skinparam linetype ortho

interface Observer {
    +update(power_consumption :int)
}

interface ObserverSubject {
    +register_Observer(observer :Observer)
    +remove_Observer(observer :Observer)
    +notify_Observers()
}

interface IoTDevice {
    +turn_On()
    +turn_Off()
    +get_Power_Consumption() :int
    +set_Power_Consumption(power :int)
    +get_Device_Id() :int
    +set_Priority(priority :int)
    +get_Priority() :int
}

interface ControlStrategy {
    +execute(Devices: IoTDeviceGroup)
}

interface IoTFacade {
    +turn_On(device_id :int)
    +turn_Off(device_id :int)
    +add_Device(device :IoTDevice)
    +remove_Device(device :IoTDevice)
    +get_Power_Consumption(device_id :int) :int
    +set_Priority(device_id :int, priority :int)
    +get_Priority(device_id :int) :int
    +get_Devices() :dict
    +all_On()
    +all_Off()
}

interface Publish {
    +publish(message :dict) :bool
}

class SmartPlug{
    -id :int
    -status :int
    -power_consumption :int
    -connected :int
    -flagged :bool
    -last_command :int
    -priority :int
    +turn_On()
    +turn_Off()
    +get_Power_Consumption() :int
    +set_Power_Consumption(power :int)
    +get_Device_Id() :int
    +set_Priority(priority :int)
    +get_Priority() :int
    +update(power_consumption :int)
    -check_Health()
    +is_Flaged() : bool
    +publish() : bool
}

class IoTDeviceGroup{
    -devices :dict<<str:IoTDevice>>
    +turn_On(device_id :int)
    +turn_Off(device_id :int)
    +get_Power_Consumption(device_id :int) :int
    +set_Priority(device_id :int, priority :int)
    +get_Priority(device_id :int) :int
    +add_Device(device :IoTDevice)
    +remove_Device(device :IoTDevice)
    +get_Devices() :dict
    +all_On()
    +all_Off()
}

class DeviceMonitor{
    +register_Observer(observer :Observer)
    +remove_Observer(observer :Observer)
    +notify_Observers()
    +monitor_Update(message: dict)
}

class SimpleControl{
    +execute(Devices: IoTDeviceGroup)
}

class EMSControl{
}

class send{
   +publish(message :dict) :bool
}

class IoTMessage{
    device_id: str
    message_type: str
    payload: Dict[str, any]
    timestamp: datetime 
    priority: Optional[int]
}

' Relationships
SimpleControl -|> ControlStrategy
SmartPlug -|> Observer
SmartPlug -|> IoTDevice
IoTDeviceGroup -|> IoTFacade
IoTDeviceGroup *- IoTDevice
DeviceMonitor -|> ObserverSubject
EMSControl *- ControlStrategy
send *- IoTMessage
SmartPlug *- IoTMessage
send -|> Publish
SmartPlug *- send
SimpleControl *- IoTDeviceGroup
DeviceMonitor *- Observer

@enduml
